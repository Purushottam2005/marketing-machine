<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:rss="http://www.mulesoft.org/schema/mule/rss"
      xmlns:twitter="http://www.mulesoft.org/schema/mule/twitter"
      xmlns:quartz="http://www.mulesoft.org/schema/mule/quartz"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.1/mule.xsd
        http://www.mulesoft.org/schema/mule/twitter http://www.mulesoft.org/schema/mule/twitter/3.1/mule-twitter.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.1/mule-http.xsd
        http://www.mulesoft.org/schema/mule/rss http://www.mulesoft.org/schema/mule/rss/3.1/mule-rss.xsd
        http://www.mulesoft.org/schema/mule/quartz http://www.mulesoft.org/schema/mule/quartz/3.1/mule-quartz.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.1/mule-vm.xsd">

    <context:property-placeholder location="classpath:marketing-machine.properties"/>

    <!-- set the twitter account data as system properties or in wrapper.conf -->
    <twitter:config name="twitter" consumerKey="${twitter.consumer.key}" consumerSecret="${twitter.consumer.secret}"
        format="JSON" oauthToken="${twitter.access.token}" oauthTokenSecret="${twitter.access.secret}"/>

    <!--
        Explicitly define a HTTP connector here so that it doesn't conflict with the one that's
        automatically created under the hood by the Twitter iBean.
     -->
    <http:connector name="HttpConnector"/>

<!--     <flow name="vm2twitter"> -->
<!--         <vm:inbound-endpoint path="in"/> -->
<!--         <twitter:update-status status="#[payload:]"/> -->
<!--     </flow> -->

    <flow name="http2twittter">
        <http:inbound-endpoint host="localhost" port="${http.server.port}" path="marketing" connector-ref="HttpConnector">
            <response>
                <message-properties-transformer>
                    <add-message-property key="Content-Type" value="text/html"/>
                </message-properties-transformer>
            </response>
        </http:inbound-endpoint>
        <choice>
            <when evaluator="header" expression="inbound:http.method = GET">
                <component class="org.mule.ResourceComponent"/>
            </when>
            <otherwise>
                <http:body-to-parameter-map-transformer/>
                <expression-transformer evaluator="map-payload" expression="status"/>
                <twitter:update-status status="#[payload:]"/>
            </otherwise>
        </choice>
    </flow>

    <!--
        Use a transport specific endpoint here - need to configure the HTTP method which is not
        that easy in the old style address attribute.
     -->
    <http:endpoint name="muleBlogs" address="http://feeds.feedburner.com/muleblog" method="GET"
        connector-ref="HttpConnector"/>

    <flow name="rss2twitter">
        <quartz:inbound-endpoint jobName="pollMuleBlogs" cronExpression="${poll.cron.expression}">
            <quartz:endpoint-polling-job>
                <quartz:job-endpoint ref="muleBlogs"/>
            </quartz:endpoint-polling-job>
        </quartz:inbound-endpoint>

        <!-- split the feed into individual messages -->
        <rss:feed-splitter/>

        <!--
            Compute an md5 hash on the URI of the SyndEntry (the payload). This will be used as
            the id expression in the idempotent message filter below. A naive approach would have
            been to use the URI directly but since the URI probably contains '=' and friends it
            conflicts with Java's Properties syntax when stored in the simple-text-file-store
            used in the idempotent-message-filter below.
        -->
        <message-properties-transformer>
            <add-message-property key="feed.guid" value="#[md5:groovy:payload.uri]"/>
        </message-properties-transformer>

        <!--
            Make sure each entry is only twittered once.
         -->
        <idempotent-message-filter idExpression="#[header:feed.guid]">
            <simple-text-file-store name="idempotent-store" maxEntries="1000"
                directory="${java.io.tmpdir}/mule-marketing-machine" />
        </idempotent-message-filter>

        <!-- include the title of the blog post along with the URI and a hashtag -->
        <component class="org.mule.TwitterStatusComponent"/>

        <!-- having the message that goes out to twitter in the log seems to be a good idea -->
        <logger level="INFO" message="#[payload:]"/>

        <twitter:update-status status="#[payload:]"/>
    </flow>
</mule>
